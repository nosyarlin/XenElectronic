/*
 * XenElectronics Web Store
 * This is a MVP web store for XenElectronics
 *
 * OpenAPI spec version: 0.0.1
 * Contact: rayson.ljk@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.33
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {CheckoutBody} from '../model/CheckoutBody';
import {InlineResponse200} from '../model/InlineResponse200';
import {InlineResponse2001} from '../model/InlineResponse2001';
import {InlineResponse201} from '../model/InlineResponse201';
import {LoginBody} from '../model/LoginBody';

/**
* Default service.
* @module api/DefaultApi
* @version 0.0.1
*/
export class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the getCheckout operation.
     * @callback moduleapi/DefaultApi~getCheckoutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse201{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get products and quantities for checkout
     * See what products and how many of each product is in a checkout along with the userId the checkout is associated with
     * @param {Number} checkoutId The order to read
     * @param {module:api/DefaultApi~getCheckoutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getCheckout(checkoutId, callback) {
      
      let postBody = null;
      // verify the required parameter 'checkoutId' is set
      if (checkoutId === undefined || checkoutId === null) {
        throw new Error("Missing the required parameter 'checkoutId' when calling getCheckout");
      }

      let pathParams = {
        'checkoutId': checkoutId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse201;

      return this.apiClient.callApi(
        '/checkout/{checkoutId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the login operation.
     * @callback moduleapi/DefaultApi~loginCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2001{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Authenticates the user
     * Submit username and password through this endpoint. The server will return a cookie if username and password are correct
     * @param {module:model/LoginBody} body 
     * @param {module:api/DefaultApi~loginCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    login(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling login");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {

      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = InlineResponse2001;

      return this.apiClient.callApi(
        '/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the payment operation.
     * @callback moduleapi/DefaultApi~paymentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Informs server that payment has been made
     * Checkouts are created before payment is made. Use this endpoint to update the status on the checkout to &#x27;paid&#x27;
     * @param {String} body new status for checkout
     * @param {Number} checkoutId The order to pay for
     * @param {module:api/DefaultApi~paymentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    payment(body, checkoutId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling payment");
      }
      // verify the required parameter 'checkoutId' is set
      if (checkoutId === undefined || checkoutId === null) {
        throw new Error("Missing the required parameter 'checkoutId' when calling payment");
      }

      let pathParams = {
        'checkoutId': checkoutId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/checkout/{checkoutId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the saveCart operation.
     * @callback moduleapi/DefaultApi~saveCartCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse201{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Saves cart items to database and create a checkout
     * Saves what items this user is purchasing alongside the quantity of each item
     * @param {Array.<module:model/CheckoutBody>} body The checkout to create
     * @param {module:api/DefaultApi~saveCartCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    saveCart(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling saveCart");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = InlineResponse201;

      return this.apiClient.callApi(
        '/checkout', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the search operation.
     * @callback moduleapi/DefaultApi~searchCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse200>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get products for sale
     * Searches for products matching given filters.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.category category of products for filter
     * @param {module:api/DefaultApi~searchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    search(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'category': opts['category']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [InlineResponse200];

      return this.apiClient.callApi(
        '/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}